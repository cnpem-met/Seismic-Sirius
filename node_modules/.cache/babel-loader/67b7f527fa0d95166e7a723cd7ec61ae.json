{"ast":null,"code":"var _jsxFileName = \"/home/reftek/seismic-sirius/src/modules/seismicpreview/seismicpreview.js\";\nimport React, { Component } from 'react';\nimport './seismicpreview.css';\nimport CanvasJSReact from './canvasjs/canvasjs.react';\nimport $ from 'jquery';\nimport { hideAxys } from './actions/actions';\nimport LoadGif from '../loadGif/loadgif';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default class SeismicPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: [],\n      startTime: 0,\n      endTime: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setPreview(this.props.type, this.props.channel);\n    if (this.props.type === \"preview\") setInterval(this.setPreview.bind(this), 10000);\n  }\n\n  setPreview() {\n    fetch(`http://10.0.38.242/api/seismic${this.props.type}.php?channel=${this.props.channel}&requisition=${this.props.requisition}`).then(response => response.json()).then(responseJson => {\n      this.setState({\n        channel: responseJson.channel,\n        startTime: responseJson.startTime\n      });\n    });\n  }\n\n  render() {\n    var data = [];\n    var dataPoints = [];\n    var dataSeries = {\n      type: \"line\",\n      lineColor: \"rgb(1, 176, 117)\"\n    };\n    var time = parseFloat(this.state.startTime);\n    this.state.channel.forEach(e => {\n      dataPoints.push({\n        x: time,\n        y: parseInt(e[1])\n      });\n      time = time + 0.01;\n    });\n    dataSeries.dataPoints = dataPoints;\n    data.push(dataSeries);\n    const options = {\n      backgroundColor: \"transparent\",\n      height: $(window).height() * this.props.height,\n      zoomEnabled: true,\n      axisY: {\n        title: \"MAGNITUDE (10e+6)\",\n        titleFontSize: $(window).height() * 0.016,\n        titleFontColor: \"#FFFFFF\",\n        includeZero: true,\n        labelFontColor: \"white\",\n        labelFontSize: $(window).height() * 0.016,\n        labelFormatter: hideAxys(this.props.type)\n      },\n      axisX: {\n        titleFontSize: $(window).height() * 0.016,\n        titleFontColor: \"#FFFFFF\",\n        includeZero: false,\n        labelFontColor: \"white\",\n        labelFontSize: $(window).height() * 0.016,\n        labelFormatter: function (e) {\n          var a = new Date(e.value * 1000);\n          var hour = a.getHours() + 3;\n          var min = a.getMinutes();\n          var sec = a.getSeconds();\n          if (hour < 10) hour = \"0\" + hour;\n          if (min < 10) min = \"0\" + min;\n          if (sec < 10) sec = \"0\" + sec;\n          var time = hour + ':' + min + ':' + sec;\n          return time;\n        }\n      },\n      data: data\n    };\n    if (this.state.channel.length === 0) return /*#__PURE__*/React.createElement(LoadGif, {\n      title: this.props.title,\n      height: $(window).height() * this.props.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, \" \", this.props.title, \" \"), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/reftek/seismic-sirius/src/modules/seismicpreview/seismicpreview.js"],"names":["React","Component","CanvasJSReact","$","hideAxys","LoadGif","CanvasJSChart","SeismicPreview","constructor","props","state","channel","startTime","endTime","componentDidMount","setPreview","type","setInterval","bind","fetch","requisition","then","response","json","responseJson","setState","render","data","dataPoints","dataSeries","lineColor","time","parseFloat","forEach","e","push","x","y","parseInt","options","backgroundColor","height","window","zoomEnabled","axisY","title","titleFontSize","titleFontColor","includeZero","labelFontColor","labelFontSize","labelFormatter","axisX","a","Date","value","hour","getHours","min","getMinutes","sec","getSeconds","length","ref","chart"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './seismicpreview.css';\nimport CanvasJSReact from './canvasjs/canvasjs.react';\nimport $ from 'jquery';\n\nimport {hideAxys} from './actions/actions';\nimport LoadGif from '../loadGif/loadgif';\n\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nexport default class SeismicPreview extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {channel: [], startTime: 0, endTime: 0};\n    }\n\n    componentDidMount(){\n        this.setPreview(this.props.type, this.props.channel);\n        if(this.props.type === \"preview\")\n            setInterval(this.setPreview.bind(this), 10000);\n    }\n\n    setPreview() {\n        fetch(`http://10.0.38.242/api/seismic${this.props.type}.php?channel=${this.props.channel}&requisition=${this.props.requisition}`)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                 this.setState({\n                     channel: responseJson.channel,\n                     startTime: responseJson.startTime\n                 });\n            })\n    }\n\n    render(){\n\n        var data = [];\n        var dataPoints = [];\n        var dataSeries = {type: \"line\", lineColor: \"rgb(1, 176, 117)\"};\n        var time = parseFloat(this.state.startTime);\n\n        this.state.channel.forEach(e => {\n            dataPoints.push({x: time, y: parseInt(e[1])})\n            time = time + 0.01\n        });\n\n        dataSeries.dataPoints = dataPoints;\n        data.push(dataSeries);\n\n        const options = {\n            backgroundColor: \"transparent\",\n            height: $(window).height() * this.props.height,\n            zoomEnabled: true,\n            axisY: {\n                title: \"MAGNITUDE (10e+6)\",\n                titleFontSize: $(window).height() * 0.016,\n                titleFontColor: \"#FFFFFF\",\n                includeZero: true, \n                labelFontColor: \"white\", \n                labelFontSize:  $(window).height() * 0.016, \n                labelFormatter: hideAxys(this.props.type)\n            },\n\t\t\taxisX: {\n                titleFontSize: $(window).height() * 0.016,\n                titleFontColor: \"#FFFFFF\",\n                includeZero: false, \n                labelFontColor: \"white\", \n                labelFontSize:  $(window).height() * 0.016,\n                labelFormatter: function (e){\n                    var a = new Date(e.value*1000);\n                    var hour = a.getHours() + 3;\n                    var min = a.getMinutes();\n                    var sec = a.getSeconds();\n                    if(hour < 10)\n                        hour = \"0\"+hour\n                    if(min < 10)\n                        min = \"0\"+min\n                    if(sec < 10)\n                        sec = \"0\"+sec\n                    var time = hour + ':' + min + ':' + sec ;\n                    return time;\n                }  \n            },\n            data: data\n        }\n\n        if(this.state.channel.length === 0)\n            return(<LoadGif title={this.props.title} height={$(window).height() * this.props.height}/>);\n        \n        return(\n            <div>\n                <div className=\"spacing\"> {this.props.title} </div>\n                <CanvasJSChart options = {options} onRef={ref => this.chart = ref}/>\n            </div>\n        );\n\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}