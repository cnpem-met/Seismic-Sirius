{"ast":null,"code":"var _jsxFileName = \"/home/reftek/seismic-sirius/src/modules/seismicpreview/dayplot.js\";\nimport React, { Component } from 'react';\nimport CanvasJSReact from './canvasjs/canvasjs.react';\nimport './seismicpreview.css';\nimport LoadGif from '../loadGif/loadgif';\nimport $ from 'jquery';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default class DayPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: [],\n      samplerate: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setPreview();\n    if (this.props.type === \"preview\") setInterval(this.setPreview.bind(this), 10000);\n  }\n\n  setPreview() {\n    fetch(`http://192.168.0.16/api/seismic${this.props.type}.php?channel=${this.props.channel}`).then(response => response.json()).then(responseJson => {\n      setTimeout(() => {\n        this.setState({\n          channel: responseJson.channel.concat(responseJson.channel, responseJson.channel, responseJson.channel)\n        });\n      }, 1500);\n    });\n    fetch(\"http://192.168.0.16/api/index.php?option=samplerate\").then(response => response.json()).then(responseJson => {\n      this.setState({\n        samplerate: responseJson.monitor.status\n      });\n    });\n  }\n\n  hideAxys(option) {\n    if (option === \"preview\") {\n      return function () {\n        return \" \";\n      };\n    }\n  }\n\n  randomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  render() {\n    var data = [];\n    var channelLength = parseInt(this.state.channel.length);\n    var sample1hour = parseInt(this.state.samplerate) * 60 ** 2;\n    var hours = Math.ceil(channelLength / sample1hour);\n    var intervalo_x;\n    if (channelLength < sample1hour) intervalo_x = sample1hour / hours / 6;else intervalo_x = channelLength / hours / 6;\n\n    for (var i = 0; i < hours; i++) {\n      var dataPoints = [];\n      var dataSeries = {\n        type: \"line\",\n        lineColor: `rgb(${255 / (hours - 1) * i}, 176, 117)`\n      };\n\n      for (var j = 0; j < this.state.channel.length / hours; j++) dataPoints.push({\n        x: j,\n        y: i * -200000 + parseInt(this.state.channel[(i + 1) * j])\n      });\n\n      dataSeries.dataPoints = dataPoints;\n      data.push(dataSeries);\n    }\n\n    const options = {\n      backgroundColor: \"transparent\",\n      height: $(window).height(),\n      zoomEnabled: true,\n      axisY: {\n        title: \"HOUR OF DAY\",\n        titleFontSize: $(window).height() * 0.016,\n        titleFontColor: \"#FFFFFF\",\n        includeZero: true,\n        labelFontColor: \"white\",\n        labelFontSize: $(window).height() * 0.016,\n        interval: 200000,\n        labelFormatter: function (e) {\n          if (e.value > 0) return \"\";\n          return e.value / -200000;\n        }\n      },\n      axisX: {\n        title: \"TIME IN MINUTES\",\n        titleFontSize: $(window).height() * 0.016,\n        titleFontColor: \"#FFFFFF\",\n        includeZero: false,\n        labelFontColor: \"white\",\n        labelFontSize: $(window).height() * 0.016,\n        interval: intervalo_x,\n        labelFormatter: function (e) {\n          return parseInt(e.value * 10 / intervalo_x);\n        }\n      },\n      data: data\n    };\n    if (this.state.channel.length === 0) return /*#__PURE__*/React.createElement(LoadGif, {\n      title: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 20\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, \" \", this.props.title, \" \"), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/reftek/seismic-sirius/src/modules/seismicpreview/dayplot.js"],"names":["React","Component","CanvasJSReact","LoadGif","$","CanvasJSChart","DayPlot","constructor","props","state","channel","samplerate","componentDidMount","setPreview","type","setInterval","bind","fetch","then","response","json","responseJson","setTimeout","setState","concat","monitor","status","hideAxys","option","randomNumber","min","max","Math","random","render","data","channelLength","parseInt","length","sample1hour","hours","ceil","intervalo_x","i","dataPoints","dataSeries","lineColor","j","push","x","y","options","backgroundColor","height","window","zoomEnabled","axisY","title","titleFontSize","titleFontColor","includeZero","labelFontColor","labelFontSize","interval","labelFormatter","e","value","axisX","ref","chart"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CanvasJSReact from './canvasjs/canvasjs.react';\n\nimport './seismicpreview.css';\nimport LoadGif from '../loadGif/loadgif';\nimport $ from 'jquery';\n\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nexport default class DayPlot extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {channel: [], samplerate: 0};\n    }\n\n    componentDidMount(){\n        this.setPreview();\n        if(this.props.type === \"preview\")\n            setInterval(this.setPreview.bind(this), 10000);\n    }\n\n    setPreview(){\n        fetch(`http://192.168.0.16/api/seismic${this.props.type}.php?channel=${this.props.channel}`)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                setTimeout(() => {\n                    this.setState({\n                        channel: responseJson.channel.concat(responseJson.channel, responseJson.channel, responseJson.channel)\n                    })\n                }, 1500);\n            });\n        fetch(\"http://192.168.0.16/api/index.php?option=samplerate\")\n            .then((response) => response.json())\n            .then((responseJson) => {\n                this.setState({\n                    samplerate: responseJson.monitor.status\n                })\n            })\n    }\n\n    hideAxys(option){\n        if(option === \"preview\"){\n            return function(){return \" \";}\n        }\n    }\n\n    randomNumber(min, max){\n        return Math.random() * (max - min) + min;\n    }\n\n    render(){\n\n        var data = [];\n        var channelLength = parseInt(this.state.channel.length);\n        var sample1hour = (parseInt(this.state.samplerate) * (60 ** 2));\n        var hours = Math.ceil(channelLength / sample1hour);\n        var intervalo_x;\n        \n        if(channelLength < sample1hour)\n            intervalo_x = sample1hour / hours / 6;\n        else\n            intervalo_x = channelLength / hours / 6;\n\n        for(var i = 0; i < hours; i++){\n            var dataPoints = [];\n            var dataSeries = {type: \"line\", lineColor: `rgb(${(255 / (hours-1)) * i}, 176, 117)`};\n\n            for(var j = 0; j < this.state.channel.length / hours; j++)\n                dataPoints.push({x: j, y: i * -200000 + parseInt(this.state.channel[(i+1) * j])})\n\n            dataSeries.dataPoints = dataPoints;\n            data.push(dataSeries);\n        }\n\n        const options = {\n            backgroundColor: \"transparent\",\n            height: $(window).height(),\n            zoomEnabled: true,\n            axisY: {\n                title: \"HOUR OF DAY\",\n                titleFontSize: $(window).height() * 0.016,\n                titleFontColor: \"#FFFFFF\",\n                includeZero: true, \n                labelFontColor: \"white\", \n                labelFontSize:  $(window).height() * 0.016, \n                interval: 200000, \n                labelFormatter: function(e){\n                    if(e.value > 0)\n                        return \"\"\n                    return e.value / -200000;\n                }\n            },\n            axisX: {\n                title: \"TIME IN MINUTES\",\n                titleFontSize: $(window).height() * 0.016,\n                titleFontColor: \"#FFFFFF\",\n                includeZero: false,\n                labelFontColor: \"white\", \n                labelFontSize:  $(window).height() * 0.016,\n                interval: intervalo_x,\n                labelFormatter: function(e){\n                    return parseInt(e.value * 10 / intervalo_x);\n                }\n            },\n            data: data\n        }\n\n        if(this.state.channel.length === 0)\n            return(<LoadGif title={this.props.title}/>);\n\n        return(\n            <div>\n                <div className=\"spacing\"> {this.props.title} </div>\n                <CanvasJSChart options = { options } onRef={ref => this.chart = ref}/>\n            </div>\n        );\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}